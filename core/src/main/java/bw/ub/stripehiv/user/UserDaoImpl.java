// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 07/27/2020 07:46:16+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.ub.stripehiv.user;

import bw.ub.stripehiv.Search;
import bw.ub.stripehiv.SearchParameter;
import bw.ub.stripehiv.user.vo.UserSearchCriteria;
import bw.ub.stripehiv.user.vo.UserVO;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

/**
 * @see User
 */
@Repository("userDao")
public class UserDaoImpl
    extends UserDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toUserVO(
        User source,
        UserVO target)
    {
        // TODO verify behavior of toUserVO
        super.toUserVO(source, target);
        // WARNING! No conversion for target.dateOfBirth (can't convert source.getDateOfBirth():java.util.Date to java.util.Date
        if(source.getDateOfBirth() != null) {
        	target.setDateOfBirth(source.getDateOfBirth());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserVO toUserVO(final User entity)
    {
        // TODO verify behavior of toUserVO
        return super.toUserVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private User loadUserFromUserVO(UserVO userVO)
    {
        if (userVO.getId() == null)
        {
            return  User.Factory.newInstance();
        }
        else
        {
            return this.load(userVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public User userVOToEntity(UserVO userVO)
    {
        // TODO verify behavior of userVOToEntity
        User entity = this.loadUserFromUserVO(userVO);
        this.userVOToEntity(userVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void userVOToEntity(
        UserVO source,
        User target,
        boolean copyIfNull)
    {
        // TODO verify behavior of userVOToEntity
        super.userVOToEntity(source, target, copyIfNull);
        // No conversion for target.dateOfBirth (can't convert source.getDateOfBirth():java.util.Date to java.util.Date
        if(source.getDateOfBirth() != null) {
        	target.setDateOfBirth(source.getDateOfBirth());
        }
    }

	@Override
	protected Collection<User> handleFindByCriteria(UserSearchCriteria searchCriteria) throws Exception {
		
		Search search = new Search();

		if (searchCriteria.getEmail() != null) {
			
			SearchParameter param = new SearchParameter(searchCriteria.getEmail(), SearchParameter.EQUAL_COMPARATOR);
			search.addSearchParameter(param);
		}

		if (searchCriteria.getFirstName() != null) {
			SearchParameter param = new SearchParameter("%" + searchCriteria.getFirstName() + "%", SearchParameter.LIKE_COMPARATOR);
			search.addSearchParameter(param);
		}

		if (searchCriteria.getSurname() != null) {
			SearchParameter param = new SearchParameter("%" + searchCriteria.getSurname() + "%", SearchParameter.LIKE_COMPARATOR);
			search.addSearchParameter(param);
		}

		if (searchCriteria.getUsername() != null) {
			SearchParameter param = new SearchParameter("%" + searchCriteria.getUsername() + "%", SearchParameter.LIKE_COMPARATOR);
			search.addSearchParameter(param);
		}
		
		search.addOrderBy("username");
		
		return this.search(search);
	}
}