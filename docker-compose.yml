# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.7'

# Define services
services:
  # App backend service
  stripews:
    # Configuration for building the docker image for the backend service
    build:
      context: springws # Use an image built from the specified dockerfile in the `springws` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - stripedb # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://stripedb:3306/stripehiv?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: testuser
      SPRING_DATASOURCE_PASSWORD: TestUser123!
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend
    container_name: stripews

  # Frontend Service 
  stripeweb:
    build:
      context: angular # Use an image built from the specified dockerfile in the `angular` directory.
      dockerfile: Dockerfile
      args:
        WEB_APP_API_BASE_URL: http://127.0.0.1:8080/api
    ports:
      - "9090:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    depends_on:
      - stripews
    networks:
      - frontend  
    container_name: stripeweb

  # Database Service (Mysql)
  stripedb:
    image: mysql/mysql-server:8.0
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: stripehiv
      MYSQL_USER: testuser
      MYSQL_PASSWORD: TestUser123!
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend  
    container_name: stripedb
  
# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:    